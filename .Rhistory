theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
ggplot()+
geom_boxplot(data=endoysy1,aes(x=Pop,y=Length.mm,fill=Pop))+
scale_colour_manual(values=c("#cccccc","#999999","#666666"),guide=F)+
scale_fill_manual(values=c("#cccccc","#999999","#666666"),guide=F)+
ylim(c(0,50))+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob","Fidalgo","Oyster Bay"))+
annotate("text", x=c("1N","1H","1S"),y=50, label=c("B","A","A"),size=10)+
theme_bw()+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
#Check Data for Normality
normality<-ddply(y1size,.(Date,Site,Pop),summarize,n=length(Length.mm),sw=shapiro.test(as.numeric(Length.mm))[2])
#Data is not normally distributed based on P-Values from Shapiro Wilkes test.
#Create New column with Pop labels for analysis
y1size$Pop2<-y1size$Pop
y1size$Pop2<-revalue(y1size$Pop2,c("1H"="H","2H"="H","4H"="H","1N"="N","2N"="N","4N"="N","1S"="S","2S"="S","4S"="S"))
#Here we subset the data set to only include data from the end of year 1
endy1<-ddply(y1size,.(Length.mm,Site,Pop,Tray,Sample,Area,Pop2),subset,Date>="2014-09-19")
#check for Normality again
normality<-ddply(endy1,.(Date,Site,Pop),summarize,n=length(Length.mm),sw=shapiro.test(as.numeric(Length.mm))[2])
#Still Not normal, must use nonparametric test.
#using size data from the final sampling for Kruskal Wallis test to compare size versus site
sizekw<-kruskal.test(endy1$Length.mm~endy1$Site,endy1)
print(sizekw)
#using size data from the final sampling for Kruskal Wallis test to compare size versus Population
sizekwpop<-kruskal.test(endy1$Length.mm~endy1$Pop2,endy1)
print(sizekwpop)
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Site
sizenemenyi1<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Site, method="Tukey")
sizenemenyi1
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Population
sizenemenyi2<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Pop2, method="Tukey")
sizenemenyi2
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Site/Population Interaction
sizenemenyi3<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Site:endy1$Pop2, method="Tukey")
sizenemenyi3
#Brooder Size Data
broodersizes<-read.csv('./data/Broodersizes.csv')
#Let R know what format dates are in
broodersizes$Date<-as.Date(broodersizes$Date,"%m/%d/%Y")
#Run ANOVA on Brooding female size
brdszaov<-aov(broodersizes$Size~broodersizes$Site+broodersizes$Population+broodersizes$Site:broodersizes$Population,broodersizes)
print(brdszaov)
summary(brdszaov)
#Run TukeyHSD post hoc on Brooding Female Sizes
tkbrdsz<-TukeyHSD(brdszaov)
print(tkbrdsz)
#Dotplot for Brooding Female Sizes
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("#cccccc","#999999","#666666"), labels=c("Dabob","Fidalgo","Oyster Bay"))+
theme_bw()+
labs(x="Site",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20),
legend.justification=c(0,1),
legend.position=c(0,1),
legend.title=element_text(size=15),
legend.text=element_text(size=15))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
require(plyr)
require(ggplot2)
require(scales)
require(grid)
require(gtable)
#set working directory
setwd("**your directory here**")
#read in brood numbers csv with all brooding data
brood<-read.csv("./data/Brood-numbers-all-2014.csv")
#Make sure dates are understood to be Dates
brood$Date<-as.Date(brood$Date, "%m/%d/%Y")
#subset only the data for Oyster Bay
oysbay<-subset(brood, Site=="Oyster Bay")
#The script below creates an object out of the percent brooding graph which will be stitched to the
#temperature graph we will create to make a double Y axis graph.
grid.newpage()
p1<-ggplot(data=oysbay, aes(x=Date, weight=Percent, colour=Pop, fill=Pop))+
geom_bar(binwidth=3, position=position_dodge())+
ylim(c(0,20))+
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+
scale_colour_manual(values=c("blue","purple","orange"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
scale_fill_manual(values=c("blue","purple","orange"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
labs(x="Sample Date", y="Percent Brooding")+
theme_bw()+
theme(legend.justification=c(0,1),
legend.position=c(0,1),
axis.text.x=element_text(size=20),
axis.text.y=element_text(size=20),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20),
legend.title=element_text(size=20),
legend.text=element_text(size=20))
#reads in temperature csv for Oyster Bay
oystemp<-read.csv("./data/OysterBay-temp-2014.csv")
#Make sure Dates are understood as Dates
oystemp$Date<-as.Date(oystemp$Date, "%m/%d/%Y")
#Finds the daily minimum tempertures
oysmintemp<-ddply(oystemp,.(Date),summarise,min_temp=min(Temp,na.rm=T))
#creates a subset of temperatures for only our sampling period
oysmintemprep<-subset(oysmintemp, Date>="2014-05-01"& Date<="2014-08-07")
#creates an object out of our temperature data graph that will be overlaid on the percent brooding graph
p2<-ggplot()+geom_line(data=oysmintemprep,
aes(x=Date, y=min_temp), color="red")+
ylim(c(8,18))+
theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
axis.text.y=element_text(size=20,color="red"),
axis.title.y=element_text(size=20))
#this code tells R to overlay the temperature graph on the percent brooding graph
g1<-ggplot_gtable(ggplot_build(p1))
g2<-ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
#generates the final graph
grid.draw(g)
#General statistics on brooding using ANOVA
brood$arcperc<-asin(brood$Percent/100)
BroodANOVA<-aov(brood$arcperc~brood$Site+brood$Pop+brood$Site:brood$Pop,brood)
print(BroodANOVA)
summary(BroodANOVA)
#Tukey Post Hoc test for Brooding
broodTukey<-TukeyHSD(BroodANOVA)
print(broodTukey)
grid.newpage()
p1<-ggplot(data=oysbay, aes(x=Date, weight=Percent, colour=Pop, fill=Pop))+
geom_bar(binwidth=3, position=position_dodge())+
ylim(c(0,20))+
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+
scale_colour_manual(values=c("#cccccc","#999999","#666666"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
scale_fill_manual(values=c("#cccccc","#999999","#666666"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
labs(x="Sample Date", y="Percent Brooding")+
theme_bw()+
theme(legend.justification=c(0,1),
legend.position=c(0,1),
axis.text.x=element_text(size=20),
axis.text.y=element_text(size=20),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20),
legend.title=element_text(size=20),
legend.text=element_text(size=20))
#reads in temperature csv for Oyster Bay
oystemp<-read.csv("./data/OysterBay-temp-2014.csv")
#Make sure Dates are understood as Dates
oystemp$Date<-as.Date(oystemp$Date, "%m/%d/%Y")
#Finds the daily minimum tempertures
oysmintemp<-ddply(oystemp,.(Date),summarise,min_temp=min(Temp,na.rm=T))
#creates a subset of temperatures for only our sampling period
oysmintemprep<-subset(oysmintemp, Date>="2014-05-01"& Date<="2014-08-07")
#creates an object out of our temperature data graph that will be overlaid on the percent brooding graph
p2<-ggplot()+geom_line(data=oysmintemprep,
aes(x=Date, y=min_temp), color="black")+
ylim(c(8,18))+
theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
axis.text.y=element_text(size=20,color="black"),
axis.title.y=element_text(size=20))
#this code tells R to overlay the temperature graph on the percent brooding graph
g1<-ggplot_gtable(ggplot_build(p1))
g2<-ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
#generates the final graph
grid.draw(g)
grid.newpage()
p1<-ggplot(data=oysbay, aes(x=Date, weight=Percent, colour=Pop, fill=Pop))+
geom_bar(binwidth=3, position=position_dodge())+
ylim(c(0,20))+
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+
scale_colour_manual(values=c("#cccccc","#999999","#666666"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
scale_fill_manual(values=c("#cccccc","#999999","#666666"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
labs(x="Sample Date", y="Percent Brooding")+
theme_bw()+
theme(legend.justification=c(0,1),
legend.position=c(0,1),
axis.text.x=element_text(size=20),
axis.text.y=element_text(size=20),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20),
legend.title=element_text(size=20),
legend.text=element_text(size=20))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
#reads in temperature csv for Oyster Bay
oystemp<-read.csv("./data/OysterBay-temp-2014.csv")
#Make sure Dates are understood as Dates
oystemp$Date<-as.Date(oystemp$Date, "%m/%d/%Y")
#Finds the daily minimum tempertures
oysmintemp<-ddply(oystemp,.(Date),summarise,min_temp=min(Temp,na.rm=T))
#creates a subset of temperatures for only our sampling period
oysmintemprep<-subset(oysmintemp, Date>="2014-05-01"& Date<="2014-08-07")
#creates an object out of our temperature data graph that will be overlaid on the percent brooding graph
p2<-ggplot()+geom_line(data=oysmintemprep,
aes(x=Date, y=min_temp), color="black")+
ylim(c(8,18))+
theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
axis.text.y=element_text(size=20,color="black"),
axis.title.y=element_text(size=20))
#this code tells R to overlay the temperature graph on the percent brooding graph
g1<-ggplot_gtable(ggplot_build(p1))
g2<-ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
#generates the final graph
grid.draw(g)
brood<-read.csv("./data/Brood-numbers-all-2014.csv")
#Make sure dates are understood to be Dates
brood$Date<-as.Date(brood$Date, "%m/%d/%Y")
#subset only the data for Fidalgo
fidrep<-subset(brood, Site=="Fidalgo")
#The script below creates an object out of the percent brooding graph which will be stitched to the
#temperature graph we will create to make a double Y axis graph.
grid.newpage()
p1<-ggplot(data=fidrep, aes(x=Date, weight=Percent, colour=Pop, fill=Pop))+
geom_bar(binwidth=3, position=position_dodge())+
ylim(c(0,20))+
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+
scale_colour_manual(values=c("#cccccc","#999999","#666666"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
scale_fill_manual(values=c("#cccccc","#999999","#666666"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
labs(x="Sample Date", y="Percent Brooding")+
theme_bw()+
theme(legend.justification=c(0,1),
legend.position=c(0,1),
axis.text.x=element_text(size=20),
axis.text.y=element_text(size=20),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20),
legend.title=element_text(size=20),
legend.text=element_text(size=20))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
#reads in temperature CSV for Fidalgo Bay
fidtemp<-read.csv("./data/Fidalgo-temp-2014.csv")
#Make sure dates are understood as Dates
fidtemp$Date<-as.Date(fidtemp$Date,"%m/%d/%Y")
#Finds minimum daily temps for Fidalgo
fidmintemp<-ddply(fidtemp,.(Date),summarise,min_temp=min(Temp,na.rm=T))
#Subsets data to dates for our Sampling period
fidmintemprep<-subset(fidmintemp, Date>="2014-05-02"& Date<="2014-08-08")
#creates an object out of our temperature data graph that will be overlaid on the percent brooding graph
p2<-ggplot()+
geom_line(data=fidmintemprep,aes(x=Date, y=min_temp), color="black")+
labs(y="Daily Minimum Water Temperature (C)")+
ylim(c(8,18))+
theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
axis.text.y=element_text(size=20,color="black"),
axis.title.y=element_text(size=20))
#this code tells R to overlay the temperature graph on the percent brooding graph
g1<-ggplot_gtable(ggplot_build(p1))
g2<-ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
#Generates final graph
grid.draw(g)
brood<-read.csv("./data/Brood-numbers-all-2014.csv")
#Make sure dates are understood to be Dates
brood$Date<-as.Date(brood$Date, "%m/%d/%Y")
#subset only the data for Manchester
manrep<-subset(brood, Site=="Manchester")
#The script below creates an object out of the percent brooding graph which will be stitched to the
#temperature graph we will create to make a double Y axis graph.
grid.newpage()
p1<-ggplot(data=manrep, aes(x=Date, weight=Percent, colour=Pop, fill=Pop))+
geom_bar(binwidth=3, position=position_dodge())+
ylim(c(0,20))+
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+
scale_colour_manual(values=c("#cccccc","#999999","#666666"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
scale_fill_manual(values=c("#cccccc","#999999","#666666"),labels=c("Dabob","Fidalgo","Oyster Bay"))+
labs(x="Sample Date", y="Percent Brooding")+
theme_bw()+
theme(legend.justification=c(0,1),
legend.position=c(0,1),
axis.text.x=element_text(size=20),
axis.text.y=element_text(size=20),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20),
legend.title=element_text(size=20),
legend.text=element_text(size=20))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
#reads in temperature csv for Manchester
manch<-read.csv('./data/Manchester-temp-2014.csv')
#Makes sure Dates are understood as Dates
manch$Date<-as.Date(manch$Date,"%m/%d/%Y")
#Finds daily minimum temps for Manchester
manmintemp<-ddply(manch,.(Date),summarise,min_temp=min(Temp,na.rm=T))
#Subsets temperature data for our sampling period
manmintemprep<-subset(manmintemp, Date>="2014-04-30"& Date<="2014-08-06")
#creates an object out of our temperature data graph that will be overlaid on the percent brooding graph
p2<-ggplot()+geom_line(data=manmintemprep,
aes(x=Date, y=min_temp), color="black")+
ylim(c(8,18))+
theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
axis.text.y=element_text(size=20,color="black"),
axis.title.y=element_text(size=20))
#this code tells R to overlay the temperature graph on the percent brooding graph
g1<-ggplot_gtable(ggplot_build(p1))
g2<-ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
#generates the final graph
grid.draw(g)
require(survival)
require(RVAideMemoire)
require(multcomp)
kmdab=read.csv("./data/KMdataDabob.csv")
#shows names
names(kmdab)
#Finds the mean and variance for each population at site
with(kmdab, tapply(Death[Status==1],Population[Status==1],mean))
with(kmdab, tapply(Death[Status==1],Population[Status==1],var))
#Generates summary statistics and survival info for Kaplan Meier
fit1=with(kmdab,survfit(Surv(Death,Status)~Population))
#Shows summary statistics for Survival
summary(fit1)
#Plots Kaplan Meier graph
plot(fit1,xlim=c(0,11), col=c("#cccccc","#999999","#666666"), xlab="Survival Time from Outplant in Months", ylab="Proportion Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#cccccc","#999999","#666666"))
#reads in  Kaplan Meier formatted survival data
kmman=read.csv("./data/KMdataMan.csv")
#shows names
names(kmman)
#Finds the mean and variance for each population at site
with(kmman, tapply(Death[Status==1],Population[Status==1],mean))
with(kmman, tapply(Death[Status==1],Population[Status==1],var))
#Generates summary statistics and survival info for Kaplan Meier
fit2=with(kmman, survfit(Surv(Death,Status)~Population))
#Shows summary statistics for Survival
summary(fit2)
#Plots Kaplan Meier graph
plot(fit2, col=c("#cccccc","#999999","#666666"), xlab="Survival Time from Outplant in Months", ylab="Proportion Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#cccccc","#999999","#666666"))
#reads in  Kaplan Meier formatted survival data
kmfid=read.csv("./data/KMdataFid.csv")
#Finds the mean and variance for each population at site
with(kmfid, tapply(Death[Status==1],Population[Status==1],mean))
with(kmfid, tapply(Death[Status==1],Population[Status==1],var))
#Generates summary statistics and survival info for Kaplan Meier
fit3=with(kmfid, survfit(Surv(Death,Status)~Population))
#Shows summary statistics for Survival
summary(fit3)
#Plots Kaplan Meier graph
plot(fit3, col=c("#cccccc","#999999","#666666"), xlab="Survival Time from Outplant in Months", ylab="Proportion Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#cccccc","#999999","#666666"))
#reads in  Kaplan Meier formatted survival data
kmoys=read.csv("./data/KMdataOys.csv")
#Finds the mean and variance for each population at site
with(kmoys, tapply(Death[Status==1],Population[Status==1],mean))
with(kmoys, tapply(Death[Status==1],Population[Status==1],var))
#Generates summary statistics and survival info for Kaplan Meier
fit4=with(kmoys, survfit(Surv(Death,Status)~Population))
#Shows summary statistics for Survival
summary(fit4)
#Plots Kaplan Meier graph
plot(fit4, col=c("#cccccc","#999999","#666666"), xlab="Survival Time from Outplant in Months", ylab="Proportion Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#cccccc","#999999","#666666"))
#Summary of Survival Information
mansum<-summary(survfit(Surv(Death,Status)~Population,data=kmman))
print(mansum)
#calculates p-values for differences in Survival between groups
mansurv<-survdiff(Surv(Death,Status)~Population,data=kmman,rho=1)
#prints survdiff statistics to show significant differences between groups
print(mansurv)
#Summary of Survival Information
dabsum<-summary(survfit(Surv(Death,Status)~Population,data=kmdab))
print(dabsum)
#calculates p-values for differences in Survival between groups
dabsurv<-survdiff(Surv(Death,Status)~Population,data=kmdab)
#prints survdiff statistics to show significant differences between groups
print(dabsurv)
#calculates p-values for differences in Survival between groups
fidsurv<-survdiff(Surv(Death,Status)~Population,data=kmfid)
#prints survdiff statistics to show significant differences between groups
print(fidsurv)
#Summary of Survival Information
fidsum<-summary(survfit(Surv(Death,Status)~Population,data=kmfid))
print(fidsum)
#calculates p-values for differences in Survival between groups
oyssurv<-survdiff(Surv(Death,Status)~Population,data=kmoys)
#prints survdiff statistics to show significant differences between groups
print(oyssurv)
#Summary of Survival Information
oyssum<-summary(survfit(Surv(Death,Status)~Population,data=kmoys))
print(oyssum)
kmall=read.csv("./data/KMdataAll.csv")
names(kmall)
allfit<-coxph(Surv(Death,Status)~Site+Population+Site:Population,data=kmall)
thingy<-cox.zph(allfit)
plot(thingy[5])
allaov<-anova(allfit)
allaov
summary(allfit)
allsurv<-survdiff(Surv(Death,Status)~Site+Population,data=kmall)
print(allsurv)
plot(allsurv)
fitall2=(Surv(Death,Status)~as.factor(Site)+as.factor(Population),data=kmall)
anova(fitall2)
TukeyHSD(allfit)
broodersizes<-read.csv('./data/Broodersizes.csv')
#Let R know what format dates are in
broodersizes$Date<-as.Date(broodersizes$Date,"%m/%d/%Y")
#Run ANOVA on Brooding female size
brdszaov<-aov(broodersizes$Size~broodersizes$Site+broodersizes$Population+broodersizes$Site:broodersizes$Population,broodersizes)
print(brdszaov)
summary(brdszaov)
#Run TukeyHSD post hoc on Brooding Female Sizes
tkbrdsz<-TukeyHSD(brdszaov)
print(tkbrdsz)
#Dotplot for Brooding Female Sizes
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("#cccccc","#999999","#666666"), labels=c("Dabob","Fidalgo","Oyster Bay"))+
theme_bw()+
labs(x="Site",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20),
legend.justification=c(0,1),
legend.position=c(0,1),
legend.title=element_text(size=15),
legend.text=element_text(size=15))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
