legend.title=element_text(size=20),
legend.text=element_text(size=20))
#reads in temperature csv for Oyster Bay
oystemp<-read.csv("./data/OysterBay-temp-2014.csv")
#Make sure Dates are understood as Dates
oystemp$Date<-as.Date(oystemp$Date, "%m/%d/%Y")
#Finds the daily minimum tempertures
oysmintemp<-ddply(oystemp,.(Date),summarise,min_temp=min(Temp,na.rm=T))
#creates a subset of temperatures for only our sampling period
oysmintemprep<-subset(oysmintemp, Date>="2014-05-01"& Date<="2014-08-07")
#creates an object out of our temperature data graph that will be overlaid on the percent brooding graph
p2<-ggplot()+geom_line(data=oysmintemprep,
aes(x=Date, y=min_temp), color="red")+
ylim(c(8,18))+
theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA),
panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
axis.text.y=element_text(size=20,color="red"),
axis.title.y=element_text(size=20))
#this code tells R to overlay the temperature graph on the percent brooding graph
g1<-ggplot_gtable(ggplot_build(p1))
g2<-ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
#generates the final graph
grid.draw(g)
#General statistics on brooding
brood$arcperc<-asin(brood$Percent/100)
BroodANOVA<-aov(brood$arcperc~brood$Site+brood$Pop+brood$Site:brood$Pop,brood)
print(BroodANOVA)
broodTukey<-TukeyHSD(BroodANOVA)
print(broodTukey)
summary(BroodANOVA)
summary(broodtukey)
summary(broodTukey)
summary<-ddply(broodersize,.(Site,Population),summarize,max_size=max(Size))
summary<-ddply(broodersizes,.(Site,Population),summarize,max_size=max(Size))
View(summary)
require(plyr)
require(ggplot2)
#set working directory to local copy of repository
setwd<-("**your directory here**")
daby1edit<-read.csv("./data/Dabob-temp-2014.csv")
#reads in edited CSV with raw data.
daby1edit$Date<-as.Date(daby1edit$Date,"%m/%d/%Y")
#Tells R that the date column contains dates so it knows how to deal with them
dabmeantemp<-ddply(daby1edit,.(Date),summarise,mean_temp=mean(Temp,na.rm=T),min_temp=min(Temp,na.rm=T),max_temp=max(Temp,na.rm=T))
#finds the mean, minimum, and maximum daily temps from raw data and creates dataframe with them for Dabob
many1v3<-read.csv('./data/Manchester-temp-2014.csv')
#reads in edited CSV with raw data.
many1v3$Date<-as.Date(many1v3$Date,"%m/%d/%Y")
#Tells R that the date column contains dates so it knows how to deal with them
manmeantemp<-ddply(many1v3,.(Date),summarise,mean_temp=mean(Temp,na.rm=T),min_temp=min(Temp,na.rm=T),max_temp=max(Temp,na.rm=T))
#finds the mean, minimum, and maximum daily temps from raw data and creates dataframe with them for Manchester
fidy1v3<-read.csv("./data/Fidalgo-temp-2014.csv")
#reads in edited CSV with raw data.
fidy1v3$Date<-as.Date(fidy1v3$Date,"%m/%d/%Y")
#Tells R that the date column contains dates so it knows how to deal with them
fidmeantemp<-ddply(fidy1v3,.(Date),summarise,mean_temp=mean(Temp,na.rm=T),min_temp=min(Temp,na.rm=T),max_temp=max(Temp,na.rm=T))
#finds the mean, minimum, and maximum daily temps from raw data and creates dataframe with them for Fidalgo
oysy1edit<-read.csv("./data/OysterBay-temp-2014.csv")
#reads in edited CSV with raw data.
oysy1edit$Date<-as.Date(oysy1edit$Date, "%m/%d/%Y")
#Tells R that the date column contains dates so it knows how to deal with them
oysmeantemp<-ddply(oysy1edit,.(Date),summarise,mean_temp=mean(Temp,na.rm=T),min_temp=min(Temp,na.rm=T),max_temp=max(Temp,na.rm=T))
#finds the mean, minimum, and maximum daily temps from raw data and creates dataframe with them for Oyster Bay
ggplot()+
geom_line(data=dabmeantemp, aes(x=Date, y=mean_temp, group=1),col="forestgreen",size=1,guide=T)+
geom_line(data=manmeantemp, aes(x=Date, y=mean_temp, group=1),col="blue",size=1)+
geom_line(data=fidmeantemp, aes(x=Date, y=mean_temp, group=1),col="purple",size=1)+
geom_line(data=oysmeantemp, aes(x=Date, y=mean_temp, group=1),col="orange",size=1)+
labs(x="Date",y="Average Daily Temperature (C)")+
theme_bw()
#Creates a graph with each line representing average daily temps for each site
ggplot()+
geom_line(data=dabmeantemp, aes(x=Date, y=mean_temp, group=1, colour="1"),size=1)+
geom_line(data=manmeantemp, aes(x=Date, y=mean_temp, group=1, colour="2"),size=1)+
geom_line(data=fidmeantemp, aes(x=Date, y=mean_temp, group=1, colour="3"),size=1)+
geom_line(data=oysmeantemp, aes(x=Date, y=mean_temp, group=1, colour="4"),size=1)+
geom_hline(aes(yintercept=12.5,colour="5"),size=1)+
scale_colour_manual(values=c("forestgreen","blue","purple","orange","red"),
name="Site",
labels=c("Dabob Bay","Clam Bay","Fidalgo Bay","Oyster Bay","Spawn Thresh"))+
labs(x="Date",y="Average Daily Temperature (C)")+
theme_bw()+
theme(legend.position=c(0.13,0.15),
legend.text=element_text(size=20),
legend.title=element_text(size=20),
axis.text.x=element_text(size=20),
axis.title.x=element_text(size=20),
axis.text.y=element_text(size=20),
axis.title.y=element_text(size=20))
#Creates a graph with each line representing average daily temps for each site also adds red line to indicate Spawning threshold
ggplot()+
geom_line(data=dabmeantemp, aes(x=Date, y=min_temp, group=1, colour="1"),size=1)+
geom_line(data=manmeantemp, aes(x=Date, y=min_temp, group=1, colour="2"),size=1)+
geom_line(data=fidmeantemp, aes(x=Date, y=min_temp, group=1, colour="3"),size=1)+
geom_line(data=oysmeantemp, aes(x=Date, y=min_temp, group=1, colour="4"),size=1)+
scale_colour_manual(values=c("forestgreen","blue","purple","orange"),
name="Site",
labels=c("Dabob Bay","Clam Bay","Fidalgo Bay","Oyster Bay","Spawn Thresh"))+
labs(x="Date",y="Minimum Daily Temperature (C)")+
theme_bw()+
theme(legend.position=c(0.13,0.18),
legend.text=element_text(size=20),
legend.title=element_text(size=20),
axis.text.x=element_text(size=20),
axis.title.x=element_text(size=20),
axis.text.y=element_text(size=20),
axis.title.y=element_text(size=20))
#Creates a graph with each line representing observed minimum daily temps for each site
ggplot()+
geom_line(data=dabmeantemp, aes(x=Date, y=max_temp, group=1, colour="1"),size=1)+
geom_line(data=manmeantemp, aes(x=Date, y=max_temp, group=1, colour="2"),size=1)+
geom_line(data=fidmeantemp, aes(x=Date, y=max_temp, group=1, colour="3"),size=1)+
geom_line(data=oysmeantemp, aes(x=Date, y=max_temp, group=1, colour="4"),size=1)+
scale_colour_manual(values=c("forestgreen","blue","purple","orange"),
name="Site",
labels=c("Dabob Bay","Clam Bay","Fidalgo Bay","Oyster Bay","Spawn Thresh"))+
labs(x="Date",y="Maximum Daily Temperature (C)")+
theme_bw()+
theme(legend.position=c(0.25,0.8),
legend.text=element_text(size=20),
legend.title=element_text(size=20),
axis.text.x=element_text(size=20),
axis.title.x=element_text(size=20),
axis.text.y=element_text(size=20),
axis.title.y=element_text(size=20))
#Creates a graph with each line representing observed maximum daily temps for each site
#Dates Min Temp met Spawn Threshold
oysspawntemp<-oysmeantemp[(oysmeantemp$min_temp >= 12.5 & format(oysmeantemp$Date,"%Y")=="2014"),]
manspawntemp<-manmeantemp[(manmeantemp$min_temp >= 12.5 & format(manmeantemp$Date,"%Y")=="2014"),]
fidspawntemp<-fidmeantemp[(fidmeantemp$min_temp >= 12.5 & format(fidmeantemp$Date,"%Y")=="2014"),]
View(oysmeantemp)
brood$arcperc<-asin(brood$Percent/100)
BroodANOVA<-aov(brood$arcperc~brood$Site+brood$Pop+brood$Site:brood$Pop,brood)
print(BroodANOVA)
summary(BroodANOVA)
broodTukey<-TukeyHSD(BroodANOVA)
print(broodTukey)
summary<-ddply(broodersizes,.(Site,Population),summarize,max_size=max(Size))
brdszaov<-aov(broodersizes$Size~broodersizes$Site+broodersizes$Population+broodersizes$Site:broodersizes$Population,broodersizes)
print(brdszaov)
tkbrdsz<-TukeyHSD(brdszaov)
print(tkbrdsz)
sizekw<-kruskal.test(endy1$Length.mm~endy1$Site,endy1)
print(sizekw)
#using size data from the final sampling for Kruskal Wallis test to compare size versus Population
sizekwpop<-kruskal.test(endy1$Length.mm~endy1$Pop2,endy1)
print(sizekwpop)
sizenemenyi3<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Site:endy1$Pop2, method="Tukey")
sizenemenyi3
sizekw<-kruskal.test(endy1$Length.mm~endy1$Site,endy1)
print(sizekw)
#using size data from the final sampling for Kruskal Wallis test to compare size versus Population
sizekwpop<-kruskal.test(endy1$Length.mm~endy1$Pop2,endy1)
print(sizekwpop)
?dot
?ggplot
??ggplot
kmdab=read.csv("./data/KMdataDabob.csv")
#shows names
names(kmdab)
#Finds the mean and variance for each population at site
with(kmdab, tapply(Death[Status==1],Population[Status==1],mean))
with(kmdab, tapply(Death[Status==1],Population[Status==1],var))
#Generates summary statistics and survival info for Kaplan Meier
fit1=with(kmdab,survfit(Surv(Death,Status)~Population))
#Shows summary statistics for Survival
summary(fit1)
#Plots Kaplan Meier graph
plot(fit1,xlim=c(0,11), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="Proportion Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
#reads in  Kaplan Meier formatted survival data
kmman=read.csv("./data/KMdataMan.csv")
#shows names
names(kmman)
#Finds the mean and variance for each population at site
with(kmman, tapply(Death[Status==1],Population[Status==1],mean))
with(kmman, tapply(Death[Status==1],Population[Status==1],var))
#Generates summary statistics and survival info for Kaplan Meier
fit2=with(kmman, survfit(Surv(Death,Status)~Population))
#Shows summary statistics for Survival
summary(fit2)
#Plots Kaplan Meier graph
plot(fit2, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="Proportion Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
#reads in  Kaplan Meier formatted survival data
kmfid=read.csv("./data/KMdataFid.csv")
#Finds the mean and variance for each population at site
with(kmfid, tapply(Death[Status==1],Population[Status==1],mean))
with(kmfid, tapply(Death[Status==1],Population[Status==1],var))
#Generates summary statistics and survival info for Kaplan Meier
fit3=with(kmfid, survfit(Surv(Death,Status)~Population))
#Shows summary statistics for Survival
summary(fit3)
#Plots Kaplan Meier graph
plot(fit3, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="Proportion Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
#reads in  Kaplan Meier formatted survival data
kmoys=read.csv("./data/KMdataOys.csv")
#Finds the mean and variance for each population at site
with(kmoys, tapply(Death[Status==1],Population[Status==1],mean))
with(kmoys, tapply(Death[Status==1],Population[Status==1],var))
#Generates summary statistics and survival info for Kaplan Meier
fit4=with(kmoys, survfit(Surv(Death,Status)~Population))
#Shows summary statistics for Survival
summary(fit4)
#Plots Kaplan Meier graph
plot(fit4, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="Proportion Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
#Summary of Survival Information
mansum<-summary(survfit(Surv(Death,Status)~Population,data=kmman))
print(mansum)
#calculates p-values for differences in Survival between groups
mansurv<-survdiff(Surv(Death,Status)~Population,data=kmman,rho=1)
#prints survdiff statistics to show significant differences between groups
print(mansurv)
#Summary of Survival Information
dabsum<-summary(survfit(Surv(Death,Status)~Population,data=kmdab))
print(dabsum)
#calculates p-values for differences in Survival between groups
dabsurv<-survdiff(Surv(Death,Status)~Population,data=kmdab)
#prints survdiff statistics to show significant differences between groups
print(dabsurv)
#calculates p-values for differences in Survival between groups
fidsurv<-survdiff(Surv(Death,Status)~Population,data=kmfid)
#prints survdiff statistics to show significant differences between groups
print(fidsurv)
#Summary of Survival Information
fidsum<-summary(survfit(Surv(Death,Status)~Population,data=kmfid))
print(fidsum)
#calculates p-values for differences in Survival between groups
oyssurv<-survdiff(Surv(Death,Status)~Population,data=kmoys)
#prints survdiff statistics to show significant differences between groups
print(oyssurv)
#Summary of Survival Information
oyssum<-summary(survfit(Surv(Death,Status)~Population,data=kmoys))
print(oyssum)
kmall=read.csv("./data/KMdataAll.csv")
names(kmall)
allfit<-coxph(Surv(Death,Status)~Site+Population+Site:Population,data=kmall)
thingy<-cox.zph(allfit)
plot(thingy[5])
allaov<-anova(allfit)
allaov
summary(allfit)
allsurv<-survdiff(Surv(Death,Status)~Site+Population,data=kmall)
print(allsurv)
plot(allsurv)
fitall2=(Surv(Death,Status)~as.factor(Site)+as.factor(Population),data=kmall)
anova(fitall2)
TukeyHSD(allfit)
aovsize<-aov(endy1$Length.mm~endy1$Site+endy1$Pop2+endy1$Site:endy1$Pop2,endy1)
print(aovsize)
tukeysize<-TukeyHSD(aovsize)
print(tukeysize)
#using size data from the final sampling for Kruskal Wallis test to compare size versus site
sizekw<-kruskal.test(endy1$Length.mm~endy1$Site,endy1)
print(sizekw)
#using size data from the final sampling for Kruskal Wallis test to compare size versus Population
sizekwpop<-kruskal.test(endy1$Length.mm~endy1$Pop2,endy1)
print(sizekwpop)
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Site
sizenemenyi1<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Site, method="Tukey")
sizenemenyi1
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Population
sizenemenyi2<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Pop2, method="Tukey")
sizenemenyi2
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Site/Population Interaction
sizenemenyi3<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Site:endy1$Pop2, method="Tukey")
sizenemenyi3
#Brooder Size Data
broodersizes<-read.csv('./data/Broodersizes.csv')
#Let R know what format dates are in
broodersizes$Date<-as.Date(broodersizes$Date,"%m/%d/%Y")
#Run ANOVA on size
brdszaov<-aov(broodersizes$Size~broodersizes$Site+broodersizes$Population+broodersizes$Site:broodersizes$Population,broodersizes)
print(brdszaov)
tkbrdsz<-TukeyHSD(brdszaov)
print(tkbrdsz)
??nemenyi
summary(sizenemenyi3)
sizenemenyi3
summary(aovsize)
brood$arcperc<-asin(brood$Percent/100)
BroodANOVA<-aov(brood$arcperc~brood$Site+brood$Pop+brood$Site:brood$Pop,brood)
print(BroodANOVA)
summary(BroodANOVA)
broodTukey<-TukeyHSD(BroodANOVA)
print(broodTukey)
summary<-ddply(broodersizes,.(Site,Population),summarize,max_size=max(Size))
brdszaov<-aov(broodersizes$Size~broodersizes$Site+broodersizes$Population+broodersizes$Site:broodersizes$Population,broodersizes)
print(brdszaov)
tkbrdsz<-TukeyHSD(brdszaov)
print(tkbrdsz)
summary(brdszaov)
print(tkbrdsz)
ggplot(brood, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="y",stackdir="Center", position="dodge")
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="y",stackdir="Center", position="dodge")
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="y",stackdir="center", position="dodge")
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="y", position="dodge")
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="fill", position="dodge")
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="x", position="dodge")
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="x", position=dodge(1.0))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="x", position=position_dodge(width=0.5))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="x",stackdir="center", position=position_dodge(width=0.5))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="x",stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxix="x",stackdir="center", position=position_dodge(width=0.3))+
scale_fill_manual(values=c("blue","purple","orange"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(stackdir="center", position=position_dodge(width=0.3))+
scale_fill_manual(values=c("blue","purple","orange"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxis='y',stackdir="center", position=position_dodge(width=0.3))+
scale_fill_manual(values=c("blue","purple","orange"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxis='y',stackdir="center", position=position_dodge(width=1.0))+
scale_fill_manual(values=c("blue","purple","orange"))
geom_dotplot(binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.3,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.8))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=1))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob","Fidalgo","Oyster Bay"))+
annotate("text", x=c("1N","1H","1S"),y=50, label=c("B","A","A"),size=10)
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob","Fidalgo","Oyster Bay"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()+
labs(x="Population",y="Length (mm)")
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"))+
theme_bw()+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20),
legend.justification=c(0,1),
legend.position=c(0,1),
legend.title=element_text(size=20),
legend.text=element_text(size=20))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"), labels=c("Dabob","Fidalgo","Oyster Bay"))+
theme_bw()+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20),
legend.justification=c(0,1),
legend.position=c(0,1),
legend.title=element_text(size=20),
legend.text=element_text(size=20))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"), labels=c("Dabob","Fidalgo","Oyster Bay"))+
theme_bw()+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20),
legend.justification=c(0,1),
legend.position=c(0,1),
legend.title=element_text(size=10),
legend.text=element_text(size=10))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"), labels=c("Dabob","Fidalgo","Oyster Bay"))+
theme_bw()+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20),
legend.justification=c(0,1),
legend.position=c(0,1),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_manual(values=c("blue","purple","orange"), labels=c("Dabob","Fidalgo","Oyster Bay"))+
theme_bw()+
labs(x="Site",y="Length (mm)")+
scale_x_discrete(labels=c("Fidalgo Bay","Clam Bay","Oyster Bay"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20),
legend.justification=c(0,1),
legend.position=c(0,1),
legend.title=element_text(size=15),
legend.text=element_text(size=15))
ggplot()+
geom_boxplot(data=endmany1,aes(x=Pop,y=Length.mm,fill=Pop))+
scale_colour_manual(values=c("blue","purple","orange"),guide=F)+
scale_fill_manual(values=c("blue","purple","orange"), guide=F)+
ylim(c(0,50))+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob","Fidalgo","Oyster Bay"))+
annotate("text", x=c("4N","4H","4S"),y=50, label=c("A","B","A"),size=10)+
theme_bw()+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20))
ggplot()+
geom_boxplot(data=endfidy1,aes(x=Pop,y=Length.mm,fill=Pop))+
scale_colour_manual(values=c("blue","purple","orange"),guide=F)+
scale_fill_manual(values=c("blue","purple","orange"),guide=F)+
ylim(c(0,50))+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob","Fidalgo","Oyster Bay"))+
annotate("text", x=c("2N","2H","2S"),y=50, label=c("A","B","A"),size=10)+
theme_bw()+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20))
ggplot()+
geom_boxplot(data=endoysy1,aes(x=Pop,y=Length.mm,fill=Pop))+
scale_colour_manual(values=c("blue","purple","orange"),guide=F)+
scale_fill_manual(values=c("blue","purple","orange"),guide=F)+
ylim(c(0,50))+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob","Fidalgo","Oyster Bay"))+
annotate("text", x=c("1N","1H","1S"),y=50, label=c("B","A","A"),size=10)+
theme_bw()+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20))
