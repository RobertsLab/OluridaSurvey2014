load("~/R/sizestuff/LAEnvwithSizeclass.RData")
library(survival)
kmdab=read.csv("KMdataDabob.csv")
names(kmdab)
with(kmdab, tapply(Death[Status==1],Population[Status==1],mean))
with(kmdab, tapply(Death[Status==1],Population[Status==1],var))
fit1=with(kmdab,survfit(Surv(Death,Status)~Population))
plot(fit1, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving")
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
kmman=read.csv("KMdataMan.csv")
names(kmman)
with(kmman, tapply(Death[Status==1],Population[Status==1],mean))
with(kmman, tapply(Death[Status==1],Population[Status==1],var))
fit2=with(kmman, survfit(Surv(Death,Status)~Population))
plot(fit2, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving")
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
kmfid=read.csv("KMdataFid.csv")
with(kmfid, tapply(Death[Status==1],Population[Status==1],mean))
with(kmfid, tapply(Death[Status==1],Population[Status==1],var))
fit3=with(kmfid, survfit(Surv(Death,Status)~Population))
plot(fit3, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving")
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
kmoys=read.csv("KMdataOys.csv")
with(kmoys, tapply(Death[Status==1],Population[Status==1],mean))
with(kmoys, tapply(Death[Status==1],Population[Status==1],var))
fit4=with(kmoys, survfit(Surv(Death,Status)~Population))
plot(fit4, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving")
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
?axis
plot(fit1, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=3, xaxt="n" )
axis(1, xaxp=c(0,2,4,6,8,10))
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
plot(fit1, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=3, xaxt="n" )
axis(1, at=c(0,2,4,6,8,10),labels=T)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
plot(fit1,xaxt="n", col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=3)
plot(fit1, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=3)
axis(1, at=c(0,2,4,6,8,10),labels=T)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
plot(fit1,xlim=(0,10) col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=3)
plot(fit1,xlim=c(0,10) col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=3)
plot(fit1,xlim=c(0,10), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=3)
plot(fit1,xlim=c(0,10), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=10)
plot(fit1,xlim=c(0,10), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=5)
plot(fit1,xlim=c(0,10), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=1)
plot(fit1,xlim=c(0,10), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=2)
library(survival)
kmdab=read.csv("KMdataDabob.csv")
names(kmdab)
with(kmdab, tapply(Death[Status==1],Population[Status==1],mean))
with(kmdab, tapply(Death[Status==1],Population[Status==1],var))
fit1=with(kmdab,survfit(Surv(Death,Status)~Population))
plot(fit1,xlim=c(0,10), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
kmman=read.csv("KMdataMan.csv")
names(kmman)
with(kmman, tapply(Death[Status==1],Population[Status==1],mean))
with(kmman, tapply(Death[Status==1],Population[Status==1],var))
fit2=with(kmman, survfit(Surv(Death,Status)~Population))
plot(fit2, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
kmfid=read.csv("KMdataFid.csv")
with(kmfid, tapply(Death[Status==1],Population[Status==1],mean))
with(kmfid, tapply(Death[Status==1],Population[Status==1],var))
fit3=with(kmfid, survfit(Surv(Death,Status)~Population))
plot(fit3, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
kmoys=read.csv("KMdataOys.csv")
with(kmoys, tapply(Death[Status==1],Population[Status==1],mean))
with(kmoys, tapply(Death[Status==1],Population[Status==1],var))
fit4=with(kmoys, survfit(Surv(Death,Status)~Population))
plot(fit4, col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
plot(fit1,xlim=c(0,11), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=2)
plot(fit1,xlim=c(0,12), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=2)
plot(fit1,xlim=c(0,11), col=c("#3366CC","#CC66CC","#FF9900"), xlab="Survival Time from Outplant in Months", ylab="% Surviving", lwd=2)
legend("bottomleft", title="Population", c("Dabob","Fidalgo","Oyster Bay"), fill=c("#3366CC","#CC66CC","#FF9900"))
ggplot(data=manrep, aes(x=Date, y=Percent, group=Pop, colour=Pop, fill=Pop))+geom_line(size=1.5)+geom_point()+ylim(c(0,15))+scale_colour_manual(values=c("#3366CC","#CC66CC","#FF9900"))+scale_fill_manual(values=c("#3366CC","#CC66CC","#FF9900"))+theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+ggtitle("Percent Brooders\nManchester")+theme(legend.title=element_blank())+theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6))
library(ggplot2)
library(ggplot2)
ggplot(data=manrep, aes(x=Date, y=Percent, group=Pop, colour=Pop, fill=Pop))+geom_line(size=1.5)+geom_point()+ylim(c(0,15))+scale_colour_manual(values=c("#3366CC","#CC66CC","#FF9900"))+scale_fill_manual(values=c("#3366CC","#CC66CC","#FF9900"))+theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))+ggtitle("Percent Brooders\nManchester")+theme(legend.title=element_blank())+theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6))
ggplot()+geom_density(data=outoys, aes(x=Length.mm, group=Tray_1, colour=Tray_1, fill=Tray_1),alpha=0.3)+geom_density(data=endoys, aes(x=Length.mm, group=Tray_1, colour=Tray_1, fill=Tray_1),alpha=0.3)+scale_colour_manual(values=c("#3366CC","#CC66CC","#FF9900"))+scale_fill_manual(values=c("#3366CC","#CC66CC","#FF9900"))+ggtitle("Size Comparison\nAugust 2013 vs. August 2014")
ggplot()+geom_density(data=outoys, aes(x=Length.mm, group=Tray_1, colour=Tray_1, fill=Tray_1),alpha=0.3)+geom_density(data=endoys, aes(x=Length.mm, group=Tray_1, colour=Tray_1, fill=Tray_1),alpha=0.3)+scale_colour_manual(values=c("#3366CC","#CC66CC","#FF9900"))+scale_fill_manual(values=c("#3366CC","#CC66CC","#FF9900"))+ggtitle("Size Comparison\nAugust 2013 vs. August 2014")
ggplot(aes(endoys,x=Length.mm)+(outoys,x=Size))+geom_density(aes(group=Tray_1, colour=Tray_1),alpha=0.3)+facet_wrap(~Tray_1, ncol=1)+scale_colour_manual(values=c("#3366CC","#CC66CC","#FF9900"))+scale_fill_manual(values=c("#3366CC","#CC66CC","#FF9900"))
ggplot(mansize, aes(Date,Length.mm, group=Tray_1, color=Tray_1))+geom_point()+geom_smooth(method=lm)+scale_colour_manual(values=c("#3366CC","#CC66CC","#FF9900"))
require(plyr)
require(ggplot2)
View(outman)
meanoutsizes<-ddply(outman,.(Tray_1),summarise, mean_size=mean(Size,na.rm=T))
View(meanoutsizes)
meanoutoyssizes<-ddply(outoys,.(Tray_1),summarise, mean_size=mean(Size,na.rm=T))
meanoutfidsizes<-ddply(outfid,.(Tray_1),summarise, mean_size=mean(Size,na.rm=T))
View(outoys)
View(outfid)
meanoutoyssizes<-ddply(outoys,.(Tray_1),summarise, mean_size=mean(Length.mm,na.rm=T))
View(meanoutoyssizes)
View(meanoutfidsizes)
View(meanoutsizes)
meanendmansizes<-ddply(endman,.(Tray_1),summarise, mean_size=mean(Length.mm,na.rm=T))
meanendoyssizes<-ddply(endoys,.(Tray_1),summarise, mean_size=mean(Length.mm,na.rm=T))
meanendfidsizes<-ddply(endfid,.(Tray_1),summarise, mean_size=mean(Length.mm,na.rm=T))
View(meanendfidsizes)
View(meanendmansizes)
View(meanendoyssizes)
setwd("~/R/TempData/Temp-Data-And-Scripts")
require(ggplot2)
require(plyr)
require(splitstackshape)
require(nparcomp)
require(PMCMR)
require(pastecs)
require(afex)
#set working directory
setwd("**your directory here**")
#creates dataframe and reads in the CSV file for sizes
y1size=read.csv('./data/Size-outplant-end-all-2013-14.csv')
#check data
View(y1size)
#make R understand dates
y1size$Date<-as.Date(y1size$Date, "%m/%d/%Y")
#create table of ave size for outplant and year one for each pop at each site
y1meansize<-ddply(y1size,.(Date,Site,Pop),summarise, mean_size=mean(Length.mm,na.rm=T))
#print it out
print(y1meansize)
#create at DF with Average size for Each Site
y1sitemeansize<-ddply(y1size,.(Date,Site),summarise, mean_size=mean(Length.mm,na.rm=T))
#print it out
print(y1sitemeansize)
#produce some descriptive statistics using stat describe
y1sitestats<-ddply(y1size,.(Date, Site),summarise, stats=stat.desc(Length.mm)[c(9,10,11,12,13)])
#print it out, stats are in the order (mean, STD Error, 95% Confidence Interval, Variance, STD Deviation)
print(y1sitestats)
#now we need to create subsets for each site for out plant and end of year 1
outmany1<-ddply(y1size,.(Length.mm,Pop,Tray,Sample,Area),subset,Date=="2013-08-16"&Site=="Manchester")
outfidy1<-ddply(y1size,.(Length.mm,Pop,Tray,Sample,Area),subset,Date=="2013-08-16"&Site=="Fidalgo")
outoysy1<-ddply(y1size,.(Length.mm,Pop,Tray,Sample,Area),subset,Date=="2013-08-16"&Site=="Oyster Bay")
endmany1<-ddply(y1size,.(Length.mm,Pop,Tray,Sample,Area),subset,Date=="2014-10-24"&Site=="Manchester")
endfidy1<-ddply(y1size,.(Length.mm,Pop,Tray,Sample,Area),subset,Date=="2014-10-17"&Site=="Fidalgo")
endoysy1<-ddply(y1size,.(Length.mm,Pop,Tray,Sample,Area),subset,Date=="2014-09-19"&Site=="Oyster Bay")
#using ggplot2 to create Boxplots
ggplot()+
geom_boxplot(data=endmany1,aes(x=Pop,y=Length.mm,fill=Pop))+
scale_colour_grey(start=0, end=0.9,guide=F)+
scale_fill_grey(start=0, end=0.9, guide=F)+
ylim(c(0,50))+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob Bay","Fidalgo Bay","Oyster Bay"))+
annotate("text", x=c("4N","4H","4S"),y=50, label=c("A","B","A"),size=10)+
theme_bw()+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
ggplot()+
geom_boxplot(data=endfidy1,aes(x=Pop,y=Length.mm,fill=Pop))+
scale_colour_grey(start=0, end=0.9,guide=F)+
scale_fill_grey(start=0, end=0.9, guide=F)+
ylim(c(0,50))+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob Bay","Fidalgo Bay","Oyster Bay"))+
annotate("text", x=c("2N","2H","2S"),y=50, label=c("A","B","A"),size=10)+
theme_bw()+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
ggplot()+
geom_boxplot(data=endoysy1,aes(x=Pop,y=Length.mm,fill=Pop))+
scale_colour_grey(start=0, end=0.9,guide=F)+
scale_fill_grey(start=0, end=0.9, guide=F)+
ylim(c(0,50))+
labs(x="Population",y="Length (mm)")+
scale_x_discrete(labels=c("Dabob Bay","Fidalgo Bay","Oyster Bay"))+
annotate("text", x=c("1N","1H","1S"),y=50, label=c("B","A","A"),size=10)+
theme_bw()+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
#Check Data for Normality
normality<-ddply(y1size,.(Date,Site,Pop),summarize,n=length(Length.mm),sw=shapiro.test(as.numeric(Length.mm))[2])
#Data is not normally distributed based on P-Values from Shapiro Wilkes test.
#Create New column with Pop labels for analysis
y1size$Pop2<-y1size$Pop
y1size$Pop2<-revalue(y1size$Pop2,c("1H"="H","2H"="H","4H"="H","1N"="N","2N"="N","4N"="N","1S"="S","2S"="S","4S"="S"))
#Here we subset the data set to only include data from the end of year 1
endy1<-ddply(y1size,.(Length.mm,Site,Pop,Tray,Sample,Area,Pop2),subset,Date>="2014-09-19")
#check for Normality again
normality<-ddply(endy1,.(Date,Site,Pop),summarize,n=length(Length.mm),sw=shapiro.test(as.numeric(Length.mm))[2])
#Still Not normal, must use nonparametric test.
#using size data from the final sampling for Kruskal Wallis test to compare size versus site
sizekw<-kruskal.test(endy1$Length.mm~endy1$Site,endy1)
print(sizekw)
#using size data from the final sampling for Kruskal Wallis test to compare size versus Population
sizekwpop<-kruskal.test(endy1$Length.mm~endy1$Pop2,endy1)
print(sizekwpop)
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Site
sizenemenyi1<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Site, method="Tukey")
sizenemenyi1
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Population
sizenemenyi2<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Pop2, method="Tukey")
sizenemenyi2
#Using the size data to produce a Post Hoc Nemenyi Test to generate p-values for each comparison for Size vs Site/Population Interaction
sizenemenyi3<-posthoc.kruskal.nemenyi.test(x=endy1$Length.mm,g=endy1$Site:endy1$Pop2, method="Tukey")
sizenemenyi3
#Brooder Size Data
broodersizes<-read.csv('./data/Broodersizes.csv')
#Let R know what format dates are in
broodersizes$Date<-as.Date(broodersizes$Date,"%m/%d/%Y")
#Run ANOVA on Brooding female size
brdszaov<-aov(broodersizes$Size~broodersizes$Site+broodersizes$Population+broodersizes$Site:broodersizes$Population,broodersizes)
print(brdszaov)
summary(brdszaov)
#Run TukeyHSD post hoc on Brooding Female Sizes
tkbrdsz<-TukeyHSD(brdszaov)
print(tkbrdsz)
#Dotplot for Brooding Female Sizes
ggplot(broodersizes, aes(x=Site, fill=Population, y=Size))+
geom_dotplot(binwidth=0.5,binaxis='y',stackdir="center", position=position_dodge(width=0.5))+
scale_fill_grey(start=0, end=.9, labels=c("Dabob","Fidalgo","Oyster Bay"))+
theme_bw()+
labs(x="Site",y="Length (mm)")+
scale_x_discrete(labels=c("Northern","Central","Southern"))+
theme(axis.text.x=element_text(size=20),
axis.title.x=element_text(size=25, vjust=0.1),
axis.title.y=element_text(size=25, vjust=2),
axis.text.y=element_text(size=20),
legend.justification=c(0,1),
legend.position=c(0,1),
legend.title=element_text(size=15),
legend.text=element_text(size=15))+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
#mixed effects models with p-value generation
sizelme<-lmer(Length.mm~Pop2*Site+(~Pop2|Tray))
sizelme
sizep<-mixed(Length.mm~Pop2*Site+(Pop2|Tray),data=endy1)
sizep
